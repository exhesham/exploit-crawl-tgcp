var request = require('request');
var https = require('https');
var fs = require('fs');
const path = require('path');
const remote_size = require('remote-file-size')

const CONF_FILE = 'properties.conf';
const conf = read_json_file(CONF_FILE);
async function get_remote_filesize(url){
	return new Promise(function (resolve, reject) {
		remote_size(url, (err, size)=>{
			if(err){
				reject(err);
			}else{
				resolve(size)
			}
		});
	});
}

function doRequest(url, cookies) {
	var opts = {
		url: url,
		headers: {Cookie: cookies},
		timeout: conf.request_timeout_ms
	}
	return new Promise(function (resolve, reject) {
		request(opts, function (error, res, body) {
			if (!error && res.statusCode == 200) {
				resolve(body);
			} else {
				reject(error);
			}
		});
	});
}

/***
 * get a url and cookies then return the html as string - throw an error if something went wrong
 * @param url
 * @param cookies
 */
async function get_html_from_url(url, cookies){

	let body = await doRequest(url,cookies);
	return body;
}

function create_dir_sync(targetDir, {isRelativeToScript = false} = {}) {
	const sep = path.sep;
	const initDir = path.isAbsolute(targetDir) ? sep : '';
	const baseDir = isRelativeToScript ? __dirname : '.';

	targetDir.split(sep).reduce((parentDir, childDir) => {
		const curDir = path.resolve(baseDir, parentDir, childDir);
		try {
			if(!fs.existsSync(childDir)) {
				fs.mkdirSync(curDir);
				console.log(`Directory ${curDir} created!`);
			}
		} catch (err) {
			if (err.code !== 'EEXIST') {
				throw err;
			}

			console.log(`Directory ${curDir} already exists!`);
		}

		return curDir;
	}, initDir);
}
function sleep(ms) {
	return new Promise(resolve => setTimeout(resolve, ms));
}
function to_friendly_filename(s){
	s = s.replace(/[^a-z0-9\-]/gi, ' ');
	// s = s.replace(/[^a-z0-9\-]/gi, ' ');?
	return s
}
function read_text_file(name){
	return fs.readFileSync(name, 'utf8');

}
function lpad(str, length) {
	try{
		while (str.length < length)
			str = '0' + str;
	}catch (e){
		console.error('failed to pad ' + padString)
	}
	return str;
}
function read_json_file(name){
	var contents = read_text_file(name);
	return JSON.parse(contents);
}

/***
 * after reveiling the iframe, send the link here so it will download the file
 * @param url
 * @param path
 */
function download_file(url, path){
	var file = fs.createWriteStream(path);
	var req = https.get(url, function(response) {
		response.pipe(file,(error, r, body)=>{
			console.debug(error,r)
		});
	});
}

function read_json_from_file(file){
	if(fs.existsSync(file)){
		return JSON.parse(read_json_file(file))
	}
	return {};
}
module.exports.get_html_from_url = get_html_from_url;
module.exports.read_json_file = read_json_file;
module.exports.read_text_file = read_text_file;
module.exports.to_friendly_filename = to_friendly_filename;
module.exports.download_file = download_file;
module.exports.get_remote_filesize = get_remote_filesize;
module.exports.create_dir_sync = create_dir_sync;
module.exports.lpad = lpad;
module.exports.sleep = sleep;
module.exports.read_json_from_file = read_json_from_file;