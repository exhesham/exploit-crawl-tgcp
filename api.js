var request = require('request');
var https = require('https');
var fs = require('fs');

const CONF_FILE = 'properties.conf';
const conf = read_json_file(CONF_FILE);



function doRequest(url, cookies) {
	// use a timeout value of 10 seconds
	var timeoutInMilliseconds = 10*1000

	var opts = {
		url: url,
		headers: {Cookie: cookies},
		timeout: timeoutInMilliseconds
	}
	return new Promise(function (resolve, reject) {
		request(opts, function (error, res, body) {
			if (!error && res.statusCode == 200) {
				resolve(body);
			} else {
				reject(error);
			}
		});
	});
}

/***
 * get a url and cookies then return the html as string - throw an error if something went wrong
 * @param url
 * @param cookies
 */
async function get_html_from_url(url, cookies){

	let body = await doRequest(url,cookies);
	return body;
}

function to_friendly_filename(s){
	return s.replace(/[^a-z0-9\-]/gi, ' ');
}
function read_text_file(name){
	return fs.readFileSync(name, 'utf8');

}
function lpad(str, length) {
	try{
		while (str.length < length)
			str = padString + str;
	}catch (e){
		console.error('failed to pad ' + padString)
	}
	return str;
}
function read_json_file(name){
	var contents = read_text_file(name);
	return JSON.parse(contents);
}

/***
 * after reveiling the iframe, send the link here so it will download the file
 * @param url
 * @param path
 */
function download_file(url, path){
	var file = fs.createWriteStream(path);
	var req = https.get(url, function(response) {
		response.pipe(file);
	});
}
module.exports.get_html_from_url = get_html_from_url;
module.exports.read_json_file = read_json_file;
module.exports.read_text_file = read_text_file;
module.exports.to_friendly_filename = to_friendly_filename;
module.exports.download_file = download_file;
module.exports.lpad = lpad;